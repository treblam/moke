{
  "name": "medium-editor",
  "version": "1.8.8",
  "author": {
    "name": "Davi Ferreira",
    "email": "hi@daviferreira.com"
  },
  "description": "Medium.com WYSIWYG editor clone.",
  "main": "src/js/medium-editor.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/daviferreira/medium-editor"
  },
  "bugs": {
    "url": "https://github.com/daviferreira/medium-editor/issues",
    "email": "hi@daviferreira.com"
  },
  "homepage": "http://daviferreira.github.io/medium-editor/",
  "keywords": [
    "editor",
    "medium",
    "wysiwyg",
    "rich-text"
  ],
  "license": "THE BEER-WARE LICENSE",
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-autoprefixer": "~0.7.3",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-contrib-jasmine": "~0.6.1",
    "grunt-contrib-csslint": "~0.2.0",
    "grunt-jslint": "~1.1.8",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-contrib-concat": "~0.4.0",
    "grunt-template-jasmine-istanbul": "~0.3.1",
    "grunt-plato": "~1.0.0",
    "brfs": "1.1.1",
    "grunt-sass": "~0.12.0",
    "grunt-contrib-cssmin": "~0.9.0"
  },
  "scripts": {
    "test": "grunt test --verbose"
  },
  "readme": "# MediumEditor\n\nThis is a clone of [medium.com](https://medium.com) inline editor toolbar.\n\nSince I always had problems with bloated editors and I loved the simplicity of medium.com solution I've tried to implement their WYSIWYG approach with this script.\n\nMediumEditor has been written using vanilla JavaScript, no additional frameworks required.\n\nTested on Google Chrome, Firefox and IE9+.\n\n[![NPM info](https://nodei.co/npm/medium-editor.png?downloads=true)](https://nodei.co/npm/medium-editor.png?downloads=true)\n\n[![Travis build status](https://travis-ci.org/daviferreira/medium-editor.png?branch=master)](https://travis-ci.org/daviferreira/medium-editor)\n[![dependencies](https://david-dm.org/daviferreira/medium-editor.png)](https://david-dm.org/daviferreira/medium-editor)\n[![devDependency Status](https://david-dm.org/daviferreira/medium-editor/dev-status.png)](https://david-dm.org/daviferreira/medium-editor#info=devDependencies)\n\n# Basic usage\n\n![screenshot](https://raw.github.com/daviferreira/medium-editor/master/demo/img/medium-editor.jpg)\n\n__demo__: [http://daviferreira.github.io/medium-editor/](http://daviferreira.github.io/medium-editor/)\n\nFirst, you need to attach medium editor's stylesheet to your page:\n\n```html\n<link rel=\"stylesheet\" href=\"css/medium-editor.css\"> <!-- Core -->\n<link rel=\"stylesheet\" href=\"css/themes/default.css\"> <!-- or any other theme -->\n```\n\nThe next step is to reference the editor's script and instantiate a new MediumEditor object:\n\n```html\n<script src=\"js/medium-editor.js\"></script>\n<script>var editor = new MediumEditor('.editable');</script>\n```\n\nThe above code will transform all the elements with the .editable class into HTML5 editable contents and add the medium editor toolbar to them.\n\nYou can also pass a list of HTML elements:\n\n```javascript\nvar elements = document.querySelectorAll('.editable'),\n    editor = new MediumEditor(elements);\n```\n\n## IE9\n\nIf you want to support IE9, you will need to use a classList pollyfill, like Eli Gray's, available at [https://github.com/eligrey/classList.js](https://github.com/eligrey/classList.js).\n\n## Initialization options\n\n* __allowMultiParagraphSelection__: enables the toolbar when selecting multiple paragraphs/block elements. Default: true\n* __anchorInputPlaceholder__: text to be shown as placeholder of the anchor input. Default: _Paste or type a link_\n* __anchorPreviewHideDelay__: time in milliseconds to show the anchor tag preview after the mouse has left the anchor tag. Default: 500\n* __buttons__: the set of buttons to display on the toolbar. Default: ['bold', 'italic', 'underline', 'anchor', 'header1', 'header2', 'quote']\n* __buttonLabels__: type of labels on the buttons. Values: 'fontawesome', `{'bold': '<b>b</b>', 'italic': '<i>i</i>'}`. Default: false\n* __checkLinkFormat__: enables/disables check for http on anchor links. Default: false\n* __cleanPastedHTML__: cleans pasted content from different sources, like google docs etc. Default: false\n* __delay__: time in milliseconds to show the toolbar or anchor tag preview. Default: 0\n* __diffLeft__: value in pixels to be added to the X axis positioning of the toolbar. Default: 0\n* __diffTop__: value in pixels to be added to the Y axis positioning of the toolbar. Default: -10\n* __disableReturn__:  enables/disables the use of the return-key. You can also set specific element behavior by using setting a data-disable-return attribute. Default: false\n* __disableDoubleReturn__:  allows/disallows two (or more) empty new lines. You can also set specific element behavior by using setting a data-disable-double-return attribute. Default: false\n* __disableToolbar__: enables/disables the toolbar, adding only the contenteditable behavior. You can also set specific element behavior by using setting a data-disable-toolbar attribute. Default: false\n* __disableEditing__: enables/disables adding the contenteditable behavior. Useful for using the toolbar with customized buttons/actions. You can also set specific element behavior by using setting a data-disable-editing attribute. Default: false\n* __elementsContainer__: specifies a DOM node to contain MediumEditor's toolbar and anchor preview elements. Default: document.body\n* __firstHeader__: HTML tag to be used as first header. Default: h3\n* __forcePlainText__: Forces pasting as plain text. Default: true\n* __placeholder__: Defines the default placeholder for empty contenteditables. You can overwrite it by setting a data-placeholder attribute on your elements. Default: 'Type your text'\n* __secondHeader__: HTML tag to be used as second header. Default: h4\n* __targetBlank__: enables/disables target=\"\\_blank\" for anchor tags. Default: false\n* __extensions__: extension to use (see _Extensions_) for more. Default: {}\n\nExample:\n\n```javascript\nvar editor = new MediumEditor('.editable', {\n    anchorInputPlaceholder: 'Type a link',\n    buttons: ['bold', 'italic', 'quote'],\n    diffLeft: 25,\n    diffTop: 10,\n    firstHeader: 'h1',\n    secondHeader: 'h2',\n    delay: 1000,\n    targetBlank: true\n});\n```\n\n## Extra buttons\n\nMedium Editor, by default, will show only the buttons listed above to avoid a huge toolbar. There are a couple of extra buttons you can use:\n\n* __superscript__\n* __subscript__\n* __strikethrough__\n* __unorderedlist__\n* __orderedlist__\n* __pre__\n* __image__ (this simply converts selected text to an image tag)\n* __indent__ (moves the selected text up one level)\n* __outdent__ (moves the selected text down one level)\n\n\n## Themes\n\nCheck out the Wiki page for a list of available themes: [https://github.com/daviferreira/medium-editor/wiki/Themes](https://github.com/daviferreira/medium-editor/wiki/Themes)\n\n## API\n\n* __.deactivate()__: disables the editor\n* __.activate()__: re-activates the editor\n* __.serialize()__: returns a JSON object with elements contents\n\n\n## Capturing DOM changes\n\nFor observing any changes on contentEditable\n\n```js\n$('.editable').on('input', function() {\n  // Do some work\n});\n```\n\nThis is handy when you need to capture modifications other thats outside of `key up`'s scope like clicking on toolbar buttons.\n\n`input` is supported by Chrome, Firefox, IE9 and other modern browsers. If you want to read more or support older browsers, check [Listening to events of a contenteditable HTML element](http://stackoverflow.com/questions/7802784/listening-to-events-of-a-contenteditable-html-element/7804973#7804973) and [Detect changes in the DOM](http://stackoverflow.com/questions/3219758/detect-changes-in-the-dom)\n\n## Extensions\n\nTo add additional additional functions that are not supported by the native [browser API](https://developer.mozilla.org/de/docs/Rich-Text_Editing_in_Mozilla) you can\nwrite extensions that are then integrated into the toolbar. The Extension API is currently unstable and very minimal.\n\nAn extension is an object that has essentially two functions `getButton` and `checkState`.\n\n* `getButton` is called when the editor is initialized and should return a element that is integrated into the toolbar.\n  Usually this will be a `<button>` element like the onces Medium Editor uses. All event handling on this button is\n  _entirely up to you_ so you should either keep a reference or bind your eventhandlers before returning it. You can\n  also return a HTML-String that is then integrated into the toolbar also this is not really useful.\n\n* `checkState` is called whenever a user selects some text in the area where the Medium Editor instance is running. It's\n  responsability is to toggle the current _state_ of the button. I.e. marking is a _on_ or _off_. Again the method on how\n  determine the state is entirely up to you. `checkState` will be called multiple times and will receive a [DOM `Element`](https://developer.mozilla.org/en-US/docs/Web/API/element)\n  as parameter.\n\n### Example\n\nA simple example the uses [rangy](https://code.google.com/p/rangy/) and the [CSS Class Applier Module](https://code.google.com/p/rangy/wiki/CSSClassApplierModule) to support highlighting of text:\n\n    rangy.init();\n\n    function Highlighter() {\n        this.button = document.createElement('button');\n        this.button.className = 'medium-editor-action';\n        this.button.innerText = 'H';\n        this.button.onclick = this.onClick.bind(this);\n        this.classApplier = rangy.createCssClassApplier(\"highlight\", {\n            elementTagName: 'mark',\n            normalize: true\n        });\n    }\n    Highlighter.prototype.onClick = function() {\n        this.classApplier.toggleSelection();\n    }\n    Highlighter.prototype.getButton = function() {\n        return this.button;\n    }\n    Highlighter.prototype.checkState = function (node) {\n        if(node.tagName == 'MARK') {\n            this.button.classList.add('medium-editor-button-active');\n        }\n    }\n\n    var e = new MediumEditor('.editor', {\n        buttons: ['highlight', 'bold', 'italic', 'underline'],\n        extensions: {\n            'highlight': new Highlighter()\n        }\n    });\n\n## Image Upload\n\n[Pavel Linkesch](https://github.com/orthes) has developed a jQuery plugin to upload images following Medium.com functionality. Check it out at [http://orthes.github.io/medium-editor-insert-plugin/](http://orthes.github.io/medium-editor-insert-plugin/)\n\n## Laravel\n\n[Zvonko Biškup](https://github.com/codeforest) has written an [awesome tutorial](http://www.codeforest.net/laravel-wysiwyg-editor) about how to integrate MediumEditor into your Laravel Project.\n\n## Rails Gem\n\n[Ahmet Sezgin Duran](https://github.com/marjinal1st/)  gemified Medium Editor for Rails asset pipeline, check it out at [https://github.com/marjinal1st/medium-editor-rails](https://github.com/marjinal1st/medium-editor-rails).\n\n## Angular directive\n\n[Thijs Wijnmaalen](https://github.com/thijsw) hacked together an AngularJS\ndirective. Check it out at\n[https://github.com/thijsw/angular-medium-editor](https://github.com/thijsw/angular-medium-editor)\n\n## Development\n\nMediumEditor development tasks are managed by Grunt. To install all the necessary packages, just invoke:\n\n```bash\nnpm install\n```\n\nThese are the available grunt tasks:\n\n* __js__: runs jslint and jasmine tests and creates minified and concatenated versions of the script;\n* __css__: runs autoprefixer and csslint\n* __test__: runs jasmine tests, jslint and csslint\n* __watch__: watch for modifications on script/scss files\n\nThe source files are located inside the __src__ directory.\n\n## Contributing\n\n[![Stories in Ready](https://badge.waffle.io/daviferreira/medium-editor.png)](https://waffle.io/daviferreira/medium-editor)\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Test your changes to the best of your ability.\n4. Update the documentation to reflect your changes if they add or changes current functionality.\n5. Commit your changes (`git commit -am 'Added some feature'`)\n6. Push to the branch (`git push origin my-new-feature`)\n7. Create new Pull Request\n\n## Contributors\n\n```\n project  : medium-editor\n repo age : 11 months\n active   : 145 days\n commits  : 535\n files    : 56\n authors  :\n   396\tDavi Ferreira           74.0%\n    20\tMaxime de Visscher      3.7%\n    12\tAndy Yaco-Mink          2.2%\n     8\tDerek Odegard           1.5%\n     8\tJarl Gunnar T. Flaten   1.5%\n     8\tPedro Nasser            1.5%\n     8\tSeif                    1.5%\n     5\tMartin Thurau           0.9%\n     5\tOmniaGM                 0.9%\n     4\tSebastian Zuchmanski    0.7%\n     4\tminikomi                0.7%\n     3\tAndrew Hubbs            0.6%\n     3\tDmitri Cherniak         0.6%\n     3\tNikita Korotaev         0.6%\n     3\tTroels Knak-Nielsen     0.6%\n     3\tarol                    0.6%\n     3\tʞuıɯ-oɔɐʎ ʎpuɐ          0.6%\n     2\tEthan Turkeltaub        0.4%\n     2\tJacob Magnusson         0.4%\n     2\tmako                    0.4%\n     1\tAdam Mulligan           0.2%\n     1\tAlberto Gasparin        0.2%\n     1\tBitdeli Chef            0.2%\n     1\tCenk Dölek             0.2%\n     1\tDavid Collien           0.2%\n     1\tDavid Hellsing          0.2%\n     1\tDenis Gorbachev         0.2%\n     1\tDiana Liao              0.2%\n     1\tJack Parker             0.2%\n     1\tJeff Welch              0.2%\n     1\tMark Kraemer            0.2%\n     1\tMax                     0.2%\n     1\tMaxime Dantec           0.2%\n     1\tMaxime De Visscher      0.2%\n     1\tMichael Kay             0.2%\n     1\tMoore Adam              0.2%\n     1\tNic Malan               0.2%\n     1\tNoah Paessel            0.2%\n     1\tPavel Linkesch          0.2%\n     1\tRobert Koritnik         0.2%\n     1\tSarah Squire            0.2%\n     1\tScott Carleton          0.2%\n     1\tSøren Torp Petersen     0.2%\n     1\tTom MacWright           0.2%\n     1\thappyaccidents          0.2%\n     1\tmako yass               0.2%\n     1\tmbrookes                0.2%\n     1\tmuescha                 0.2%\n     1\tshaohua                 0.2%\n     1\tt_kjaergaard            0.2%\n     1\ttypify                  0.2%\n     1\twaffleio                0.2%\n     1\tzzjin                   0.2%\n```\n\n## License\n\n\"THE BEER-WARE LICENSE\" (Revision 42):\n\nAs long as you retain this notice you can do whatever you want with this stuff. If we meet some day, and you think this stuff is worth it, you can buy me a beer in return.\n",
  "readmeFilename": "README.md",
  "_id": "medium-editor@1.8.8",
  "_shasum": "3326771ddb64f2da7d1bdf417c83c52af63d942e",
  "_from": "medium-editor@*",
  "_resolved": "https://registry.npmjs.org/medium-editor/-/medium-editor-1.8.8.tgz"
}
